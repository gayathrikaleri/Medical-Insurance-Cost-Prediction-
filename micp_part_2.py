# -*- coding: utf-8 -*-
"""MICP Part-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tCjspw9csTzpfQ0tpeEi4904oSIQ9YoU
"""

import pandas as pd

data = pd.read_csv("insurance.csv")

"""1. Display Top 5 Rows of The Dataset"""

data.head()

"""2. Check Last 5 Rows of The Dataset"""

data.tail()

"""3. Find Shape of Our Dataset (Number of Rows And Number of Columns)"""

data.shape

print("Number of Rows",data.shape[0])
print("Number of Columns",data.shape[1])

"""4. Get Information About Our Dataset Like Total Number Rows, Total Number of Columns, Datatypes of Each Column And Memory Requirement"""

data.info()

"""5.Check Null Values In The Dataset"""

data.isnull().sum()

"""6. Get Overall Statistics About The Dataset"""

data.describe(include='all')

"""7. Covert Columns From String ['sex' ,'smoker','region' ] To Numerical Values"""

data['sex'].unique()
data['sex']=data['sex'].map({'female':0,'male':1})
data['smoker']=data['smoker'].map({'yes':1,'no':0})
data['region']=data['region'].map({'southwest':1,'southeast':2,'northwest':3,'northeast':4})

data.head()

"""8. Store Feature Matrix In X and Response(Target) In Vector y"""

X = data.drop(['charges'],axis=1)
y = data['charges']

"""
9. Train/Test split

i. Split data into two part : a training set and a testing set

ii. Train the model(s) on training set

iii. Test the Model(s) on Testing set
"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

"""10. Import the models"""

from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.tree import DecisionTreeRegressor

"""11. Model Training"""

lr = LinearRegression()
lr.fit(X_train,y_train)
svm = SVR()
svm.fit(X_train,y_train)
rf = RandomForestRegressor()
rf.fit(X_train,y_train)
gr = GradientBoostingRegressor()
gr.fit(X_train,y_train)
dt = DecisionTreeRegressor()
dt.fit(X_train,y_train)

"""12. Prediction on Test Data"""

y_pred1 = lr.predict(X_test)
y_pred2 = svm.predict(X_test)
y_pred3 = rf.predict(X_test)
y_pred4 = gr.predict(X_test)
y_pred5 = dt.predict(X_test)


df1 = pd.DataFrame({'Actual':y_test,'Lr':y_pred1,'svm':y_pred2,'rf':y_pred3,'gr':y_pred4,'dt':y_pred5})

df1

"""13. Compare Performance Visually"""

import matplotlib.pyplot as plt

plt.subplot(221)
plt.plot(df1['Actual'].iloc[0:11],label='Actual')
plt.plot(df1['Lr'].iloc[0:11],label="Lr")
plt.legend()

plt.subplot(222)
plt.plot(df1['Actual'].iloc[0:11],label='Actual')
plt.plot(df1['svm'].iloc[0:11],label="svr")
plt.legend()

plt.subplot(223)
plt.plot(df1['Actual'].iloc[0:11],label='Actual')
plt.plot(df1['rf'].iloc[0:11],label="rf")
plt.legend()

plt.subplot(224)
plt.plot(df1['Actual'].iloc[0:11],label='Actual')
plt.plot(df1['gr'].iloc[0:11],label="gr")
plt.legend()


plt.tight_layout()

plt.legend()

"""14. Evaluating the Algorithm"""

from sklearn import metrics

score1 = metrics.r2_score(y_test,y_pred1)
score2 = metrics.r2_score(y_test,y_pred2)
score3 = metrics.r2_score(y_test,y_pred3)
score4 = metrics.r2_score(y_test,y_pred4)
score5 = metrics.r2_score(y_test,y_pred5)

print(score1,score2,score3,score4,score5)

s1 = metrics.mean_absolute_error(y_test,y_pred1)
s2 = metrics.mean_absolute_error(y_test,y_pred2)
s3 = metrics.mean_absolute_error(y_test,y_pred3)
s4 = metrics.mean_absolute_error(y_test,y_pred4)
s5 = metrics.mean_absolute_error(y_test,y_pred5)

print(s1,s2,s3,s4,s5)